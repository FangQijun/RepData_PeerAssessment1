> gender<- c("M","F","M","M")
> race<- c("Mongolian","Caucasian","Nigerian","Latino")
> degree<- c("PhD","MS","Bachelor","MS")
> height<- seq(from=170, to=185, by=5)
> database<- data.frame(gender,race,degree,height)
gender<- c("M","F","M","M")
race<- c("Mongolian","Caucasian","Nigerian","Latino")
degree<- c("PhD","MS","Bachelor","MS")
height<- seq(from=170, to=185, by=5)
database<- data.frame(gender,race,degree,height)
database
DATABASE<- read.table(file="C:\\Users\\方小肥_Frank\\Desktop\\database.txt",header=TRUE)
DATABASE
help.start()
help(cc)
help(??cc)
prestinedata <- read.table("C:\\Users\\方小肥_Frank\\Desktop\\Factors.txt")
initialdata <- read.table("C:\\Users\\方小肥_Frank\\Desktop\\Factors.txt")
data <- as.matrix(initialdata)
colmeans(data)
colMeans(data)
cov(data)   #样本协差阵
19*cov(data)   #样本离差阵
cor(data)   #样本相关阵
mu0 <- matrix(c(7,5,4,8),ncol=1)
mu0
X <- colMeans(data)
X <- as.matrix(colMeans(data),ncol=1)
X
X <- matrix(colMeans(data))
X
S<- as.matrix(19*cov(data))
S
S<- matrix(19*cov(data))
S
S<- matrix(19*cov(data),nrow=4,ncol=4)
S
Tsquare <- 19/20*t(mu-mu0)*solve(S)*(mu-mu0)
Tsquare <- 19/20*t(mu-mu0)*solve(S)*(mu-mu0)
Tsquare <- 19/20*t(X-mu0)*solve(S)*(X-mu0)
Tsquare <- 19/20*t(X-mu0)%*%solve(S)%*%(X-mu0)
Tsquare
Tsquare <- as.numeric(19/20*t(X-mu0)%*%solve(S)%*%(X-mu0))
Taquare
Tsquare
F <- Tsquare*(20-4)/19/4
F
F0=1-pf(F,4,16)
F0
F0=pf(F,4,16)
F0
fai=0:(pi/180):2*pi;
omiga=1;
thita=0;
R=60;
ut=(omiga*R/(sqrt(1+fai^2)))*(sin(2*thita+fai)*(cos(thita)-sin(thita)+fai*cos(thita+fai)));
plot(fai, ut)
fai=fai/180*pi;
ut=(omiga*R/(sqrt(1+fai^2)))*(sin(2*thita+fai)*(cos(thita)-sin(thita)+fai*cos(thita+fai)));
plot(fai, ut)
fai
fai=0:359;
fai=fai/180*pi;
ut=(omiga*R/(sqrt(1+fai^2)))*(sin(2*thita+fai)*(cos(thita)-sin(thita)+fai*cos(thita+fai)));
plot(fai, ut)
fai=0:1079;
fai=fai/180*pi;
ut=(omiga*R/(sqrt(1+fai^2)))*(sin(2*thita+fai)*(cos(thita)-sin(thita)+fai*cos(thita+fai)));
plot(fai, ut)
fai=0:50:100000;
fai
ut=(omiga*R/(sqrt(1+fai^2)))*(sin(2*thita+fai)*(cos(thita)-sin(thita)+fai*cos(thita+fai)));
plot(fai, ut)
fai=0:50:10000;
ut=(omiga*R/(sqrt(1+fai^2)))*(sin(2*thita+fai)*(cos(thita)-sin(thita)+fai*cos(thita+fai)));
plot(fai, ut)
fai=0:50:1000;
fai=0:50:10000;
fai=fai/180*pi;
ut=(omiga*R/(sqrt(1+fai^2)))*(sin(2*thita+fai)*(cos(thita)-sin(thita)+fai*cos(thita+fai)));
plot(fai, ut)
fai=0:50:1000;
fai=fai/180*pi;
ut=(omiga*R/(sqrt(1+fai^2)))*(sin(2*thita+fai)*(cos(thita)-sin(thita)+fai*cos(thita+fai)));
plot(fai, ut)
fai=0:25:3000;
fai=fai/180*pi;
ut=(omiga*R/(sqrt(1+fai^2)))*(sin(2*thita+fai)*(cos(thita)-sin(thita)+fai*cos(thita+fai)));
plot(fai, ut)
library(rJava)
utils:::menuInstallPkgs()
library(rJava)
utils:::menuInstallPkgs()
library(xlsx)
utils:::menuInstallPkgs()
library(xlsxjars)
library(xlsx)
a <-"hello"
attribute(a)
attributes(a)
attributes()
attributes(a)
attributes(thita)
x <- 0.6
class(x)
as.numeric(x)
as.character(x)
as.logic(x)
as.logical(x)
q()
install.package("KernSmooth")
install.packages("KernSmooth")
library( KernSmooth)
q()
a <- array(rnorm(2*2*10), c(2,2,10))
a
apply(a,c(1,2),mean)
rowMeans(a, dims=2)
help(gl)
library(datasets)
data(iris)
head(iris)
table(iris$Species)
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
lapply(s, function(x) colMeans(x[, x$Sepal.Length]))
lapply(s, function(x) colMeans(x[ ,"Sepal.Length"]))
lapply(s, function(x) colMeans(x[ ,c("Sepal.LWidth","Sepal.Length")]))
lapply(s, function(x) colMeans(x[ ,c("Sepal.Width","Sepal.Length")]))
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
data(mtcars)
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
table(cyl)
table(mtcarscyl)
table(mtcars$cyl)
with(hp, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
class(with(mtcars, tapply(hp, cyl, mean)))
209.21429-82.63636
209.21429 -82.63636
debug(ls)
ls()
0
n
n
n
n
n
n
q()
n
n
n
n
n
x <- rnorm(100,2,4)
summary(x)
str(x)
gl(40,10)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
x
x
x1 <- rbinom(50, 10, 0.5)
x1
hist(x1)
x1 <- rbinom(50, 10, 0.5)
x1
hist(x1)
q()
setwd("D:/Study/Coursera_Reproducible Research/Project 1/repdata-data-activity")
setwd("D:/Study/Coursera_Reproducible Research/Project 1/repdata-data-activity")
act <- read.csv("./activity.csv")
str(act)
D <- act$date
S <- act$steps            ##Simplify column names
I <- act$interval
D <- as.Date(D)           ##Change the "date" column of factor class to "D" column of
##Date calss
bad <- is.na(S)           ##"bad" is the label vector of NA's
S <- S[!bad]
D <- D[!bad]
I <- I[!bad]              ##Filter out missing observations
act2 <- matrix(rep(1,30528),ncol=2,nrow=15264)
act2 <- data.frame(act2)
act2$D <- D
act2$S <- S
act2$I <- I
act2 <- act2[,-c(1,2)]    ##"act2"is the processed dataset
s <- split(act2, act2$D)
SUM <- sapply(s,function(x) sum(x[,c("S")]))
SUM <- data.frame(SUM)
SUM$D<-as.character(labels(SUM)[[1]])
SUM$D <- strptime(SUM$D, "%Y-%m-%d")  ##transform the "D" column to POSIXlt/POSIXct
##format
plot(SUM$D, SUM$S, type="h", lwd=5, col="#ff2500", xlab="Date", ylab="Total Steps", main="Steps for Every Day")               ##Histogram
SUM
mean(SUM$SUM)
meadian(SUM$SUM)
median(SUM$SUM)
SUM
MAX_I <- MEAN_Interval[MEAN_Interval[,"S"]==max(MEAN_Interval$S),][,2]
MAX_MEAN <- MEAN_Interval[MEAN_Interval[,"S"]==max(MEAN_Interval$S),][,1]
paste("The 5-min interval that contains the maximum number of means of steps is the ", MAX_I, "th one.", sep="")
paste("And the maximum of the mean values is: ", MAX_MEAN, sep="")
s2 <- split(act2, act2$I)
MEAN_Interval <- sapply(s2,function(x) colMeans(x[,c("S","I")]))
MEAN_Interval <- data.frame(t(MEAN_Interval))
plot(MEAN_Interval$I, MEAN_Interval$S, type="l", col="navy", xlab="Interval", ylab="Mean Steps", main="Steps for Each Interval")     ##Time series plot
MAX_I <- MEAN_Interval[MEAN_Interval[,"S"]==max(MEAN_Interval$S),][,2]
MAX_MEAN <- MEAN_Interval[MEAN_Interval[,"S"]==max(MEAN_Interval$S),][,1]
paste("The 5-min interval that contains the maximum number of means of steps is the ", MAX_I, "th one.", sep="")
paste("And the maximum of the mean values is: ", MAX_MEAN, sep="")
table(complete.cases(act$date, act$interval, act$steps))
any(is.na(act$date))
any(is.na(act$interval))
any(is.na(act$steps))
bad2 <- is.na(act$steps)    ##"bad2" is the label vector of NA's
ACT <- act
for (i in 1:17568){
if (is.na(ACT[i,1])==TRUE){
ACT[i,1] <- MEAN_Interval[MEAN_Interval[,"I"]==ACT[i,3],1]
}    ##Substitute the NA's with the mean for corresponding 5-minute interval
}
D2 <- ACT$date
S2 <- ACT$steps
I2 <- ACT$interval
D2 <- as.Date(D2)
ACT2 <- matrix(rep(1,35136),ncol=2,nrow=17568)
ACT2 <- data.frame(ACT2)
ACT2$D2 <- D2
ACT2$S2 <- S2
ACT2$I2 <- I2
ACT2 <- ACT2[,-c(1,2)]
s <- split(ACT2, ACT2$D2)
SUM2 <- sapply(s,function(x) sum(x[,c("S2")]))
SUM2 <- data.frame(SUM)
SUM2$D2<-as.character(labels(SUM2)[[1]])
SUM2$D2 <- strptime(SUM2$D2, "%Y-%m-%d")
plot(SUM2$D, SUM2$SUM, type="h", lwd=5, col="#ff2500", xlab="Date", ylab="Total Steps", main="Steps for Every Day")
head(SUM2)
mean(SUM2$SUM)
median(SUM2$SUM)
mean(SUM$SUM)
median(SUM$SUM)
AC <- ACT
AC$date <- strptime(ACT$date, "%Y-%m-%d")    ##transform the "date" column
##to POSIXlt/POSIXct format
AC$Wkd <- weekdays(AC$date)    ##Create a "Wkd" column indicating weekdays
Wk <- rep("A",nrow(AC))
AC$Wk <- Wk
for (i in 1:nrow(AC)){
if (AC[i,4]=="Saturday" | AC[i,4]=="Sunday"){
AC[i,5] <-"weekend"
}
else {
AC[i,5] <-"weekday"
}
}                               ##Create a "Wk" column indicating the weekday/weekend
head(AC)
knit2html("PA1_template.md")
library(knitr)
knit2html("PA1_template.md")
knit2html("PA1_template.html")
knit2html("PA1_template2.md")
knit2html("PA1_template2.md")
knit2html("PA1_template2.md")
